#!/bin/bash

# get docker image names
. /etc/hypriot/clusterimages.conf

IMAGE_SWARM=${IMAGE_SWARM:-"hypriot/rpi-swarm:1.1.0"}
IMAGE_CONSUL=${IMAGE_CONSUL:-"hypriot/rpi-consul:0.6.0"}

# get network config
. /etc/hypriot/cluster.conf

DOCKER_COMPOSE_PROJECT=${DOCKER_COMPOSE_PROJECT:-"hypriot"}
BROADCAST=${BROADCAST:-192.168.200.255}
NETMASK=${NETMASK:-"/24"}

VLAN_ID=${VLAN_ID:-200}
DEFAULT_VLAN_MASTER_IP=${DEFAULT_VLAN_MASTER_IP:-192.168.200.1}
DEFAULT_VLAN_TEST_IP=${DEFAULT_VLAN_TEST_IP:-192.168.200.5}


DHCP_BROADCAST=${DHCP_BROADCAST:-192.168.200.255}
DHCP_NETMASK=${DHCP_NETMASK:-192.168.200.0}
DHCP_RANGE_FROM=${DHCP_RANGE_FROM:-192.168.200.2}
DHCP_RANGE_TO=${DHCP_RANGE_TO:-192.168.200.10 }

# variables
VLAN_INTERFACE=eth0.${VLAN_ID}


################
##### VLAN #####
################
vlan_add () {
    #echo "create vlan with tag VLAN_ID on eth0"
    ip link add link eth0 name "${VLAN_INTERFACE}" type vlan id "${VLAN_ID}"
    ip link set dev "${VLAN_INTERFACE}" up
}

vlan_reset () {
    #echo "deleting existing vlan interface"
    ip link delete dev "${VLAN_INTERFACE}" type vlan
}
####################
#### IP config #####
####################
ip_set () {
    local IP="$1"
    #echo "set ip address on vlan 200"
    ip addr add "${IP}""${NETMASK}" dev "${VLAN_INTERFACE}"
    ip link set dev "${VLAN_INTERFACE}" up
}

ip_request () {
    #echo "get ip address from DHCP"
    ip link set dev "${VLAN_INTERFACE}" up
    # use the systemd way for dhclient
cat << EOM > /etc/systemd/network/"${VLAN_INTERFACE}".network
[Match]
Name=${VLAN_INTERFACE}

[Network]
DHCP=yes
EOM
    echo "IP on ${VLAN_INTERFACE} is: $(find_ip_of_if "${VLAN_INTERFACE}")"
}
##########################
##### AVAHI zeroconf #####
##########################
avahi_config () {
    #echo "configure avahi only on eth0.200 \(vlan with id 200\)"
    # if file backup exists do not override!
    if [ ! -f "/etc/avahi/avahi-daemon.conf_bak" ]; then
      cp /etc/avahi/avahi-daemon.conf /etc/avahi/avahi-daemon.conf_bak
    fi
    sed -i -e 's/#deny-interfaces=eth1/deny-interfaces=eth1,wlan0,docker0/' \
    -e "s/#allow-interfaces=eth0/allow-interfaces=eth0,${VLAN_INTERFACE}/" \
    -e 's/use-ipv6=yes/use-ipv6=no/' /etc/avahi/avahi-daemon.conf
}

avahi_clusterservice () {
    #echo "create avahi cluster-master"
    if [ -f "/etc/avahi/services/cluster-master.service" ]; then
        rm -f /etc/avahi/services/cluster-master.service
    else
cat << EOM > /etc/avahi/services/cluster-master.service
<?xml version="1.0" standalone='no'?><!--*-nxml-*-->
<!DOCTYPE service-group SYSTEM "avahi-service.dtd">
<service-group>
  <name replace-wildcards="yes">Cluster-Master=%h</name>
  <service>
    <type>_cluster._tcp</type>
    <port>22</port>
    <txt-record>os-release=hypriot</txt-record>
  </service>
</service-group>
EOM
    fi
}

avahi_reset () {
    #echo "cleanup dnsmasq dhcp server"
    if [ -f "/etc/avahi/avahi-daemon.conf_bak" ]; then
      rm -f /etc/avahi/avahi-daemon.conf
      mv /etc/avahi/avahi-daemon.conf_bak /etc/avahi/avahi-daemon.conf
    fi
}
########################
##### DHCP dnsmasq #####
########################
dhcp_config () {
    #echo "setup dnsmasq dhcp server"
    # if file backup exists do not override!
    if [ ! -f "/etc/dnsmasq.conf_bak" ]; then
      cp /etc/dnsmasq.conf /etc/dnsmasq.conf_bak
    fi
cat << EOM > /etc/dnsmasq.conf

# set domain name
domain=hypriot.cluster
interface=${VLAN_INTERFACE}

# TODO dns stuff forward consul to ...
#server=/consul/${SELFIP}:8600

# general DHCP stuff (see RFC 2132)
#
# 1:  subnet masq
# 3:  default router
# 6:  DNS server
# 12: hostname
# 15: DNS domain (unneeded with option 'domain')
# 28: broadcast address
# 42: time server
#

dhcp-authoritative
dhcp-leasefile=/var/lib/misc/dnsmasq.leases
dhcp-option=1,${DHCP_NETMASK}
dhcp-option=28,${DHCP_BROADCAST}
# TODO deliver dns server
#dhcp-option=6,${SELFIP}

# dynamic DHCP range with a 1 hour lease
#
dhcp-range=${DHCP_RANGE_FROM},${DHCP_RANGE_TO},1h

EOM
}

dhcp_reset () {
    #echo "cleanup dnsmasq dhcp server"
    if [ -f "/etc/dnsmasq.conf_bak" ];then
        rm -f /etc/dnsmasq.conf
        mv /etc/dnsmasq.conf_bak /etc/dnsmasq.conf
    fi
}
##################
##### DOCKER #####
##################
docker_config () {
    ARCH=$(uname -m)
    #echo "make backup of /etc/default docker"
    # if file backup exists do not override!
    if [ ! -f "/etc/default/docker_bak" ]; then
      cp /etc/default/docker /etc/default/docker_bak
    fi
#echo "change config with new options for libnetwork introduced in docker 1.9"
cat << EOM > /etc/default/docker
DOCKER_OPTS="--storage-driver=overlay -D -H tcp://${SELFIP}:2375 --cluster-advertise ${SELFIP}:2375 --cluster-store consul://${SELFIP}:8500 --label hypriot.arch=${ARCH} --label hypriot.hierarchy=${MASTERorSLAVE} ${ADDITIONAL_DOCKER_OPTS}"
EOM
}

docker_reset () {
    #echo "reset docker config"
    if [ -f "/etc/default/docker_bak" ]; then
        rm -f /etc/default/docker
        mv /etc/default/docker_bak /etc/default/docker
    fi
}
##########################
##### docker-compose #####
##########################
dockercompose_config () {
YMLFILE="/etc/hypriot/docker-compose.yml"
cat << EOM > $YMLFILE
version: "2"
services:
  swarm:
    image: ${IMAGE_SWARM}
    depends_on:
      - consul
    command: join --advertise ${SELFIP}:2375 consul://${SELFIP}:8500

  swarmmanage:
    image: ${IMAGE_SWARM}
    ports:
      - 2378:2375
    depends_on:
      - consul
    command: manage --replication --advertise ${SELFIP}:2378 consul://${SELFIP}:8500

  consul:
    image: ${IMAGE_CONSUL}
    restart: always
    ports:
      - ${SELFIP}:8400:8400
      - ${SELFIP}:8500:8500
      - ${SELFIP}:8600:8600
      - ${SELFIP}:8301:8301
      - ${SELFIP}:8302:8302
    network_mode: host
EOM

if [ "$MASTERorSLAVE" == "master" ]; then
cat << EOM >> $YMLFILE
    command: agent -server -rejoin -data-dir /data -ui-dir /ui -bind ${SELFIP} -client 0.0.0.0 -bootstrap-expect 1

EOM

elif [ "$MASTERorSLAVE" == "slave" ]; then
cat << EOM >> $YMLFILE
    command: agent -server -rejoin -data-dir /data -ui-dir /ui -bind ${SELFIP} -client 0.0.0.0 -join ${CLUSTERMASTERIP}:8301

EOM
fi
}

dockercompose_start () {
    #echo "start consul and swarm container"
    if [ -f "/etc/hypriot/docker-compose.yml" ];then
        docker-compose -f /etc/hypriot/docker-compose.yml -p "${DOCKER_COMPOSE_PROJECT}" up -d
    fi
}

dockercompose_stop () {
    #echo "stop consul and swarm container"
    if [ -f "/etc/hypriot/docker-compose.yml" ];then
        docker-compose -f /etc/hypriot/docker-compose.yml -p "${DOCKER_COMPOSE_PROJECT}" down --volumes
    fi
}

dockercompose_reset () {
    #echo "cleanup docker container"
    if [ -f "/etc/hypriot/docker-compose.yml" ];then
        rm -f /etc/hypriot/docker-compose.yml
    fi
}

#########################
##### IP networking #####
#########################
check_ip () {
    local IP=$1
    local HOSTNAME_IPS=$(hostname -I)
    local i=""
    for i in $HOSTNAME_IPS; do
        if [[ "$i" == *"$IP"* ]]; then
            echo "$ip"
        fi
    done
}
check_ip_bool () {
    local IP="$1"
    local check=$(check_ip "$IP")
    if [[ -n "$check" ]]; then
        return 0
    else
        return 1
    fi

}
find_ip_of_if () {
    local INTERFACE=$1
    local HOSTNAME_IPS=$(hostname -I)
    local IPA_IP=$(ip a s "$INTERFACE")
    local i=""
    for i in $HOSTNAME_IPS; do
        if [[ "$IPA_IP" == *"$i"* ]]; then
          echo "$i"
        fi
    done
}
check_linklocal () {
    local IP="169.254."
    check_ip_bool "$IP"
}
find_if_for_ip () {
    local IP_TO_FIND=$1
    local INTERFACES=$(ip link | grep -v "link/" | awk -F": " '{print $2}')
    local i
    for i in $INTERFACES; do
        local check=$(find_ip_of_if "$i")
        if [[ "$check" == "$IP_TO_FIND" ]]; then
            echo "$i"
        fi
    done
}

fix_routing () {
    # update routes
    local IP=8.8.8.8
    # test if default route for VLAN_INTERFACE
    ip route | grep default | grep "${VLAN_INTERFACE}"  > /dev/null 2>&1;
    if [[ $? == 0 ]]; then
        # remove route if exists
        ip route del default dev "${VLAN_INTERFACE}"
    fi
    # check ping google ip
    ping -c 1 "$IP" > /dev/null 2>&1;
    if [[ $? == 0 ]]; then
        # return on success
        return 0
    fi

    local counter=0
    # try 10 times with 1 sec pause between each
    while [ $counter -lt 10 ]; do
        local status="$(ip link show dev eth0 | grep \"state UP\")"
        if [[ -z "$status" ]]; then
            ip link set dev eth0 up
        else
            counter=$(( counter + 10 ))
        fi
        conter=$(( conter + 1 ))
        sleep 1
    done
    echo "link eth0 down"
    return 1

    # test if default route for eth0
    ip route | grep default | grep eth0  > /dev/null 2>&1;
    if [[ $? == 0 ]]; then
        # return on success
        return 0
    fi

    counter=0
    # try 10 times with 1 sec pause between each
    while [ $counter -lt 10 ]; do
        echo "Request new IP"
        dhclient eth0
        if [[ $? == 0 ]]; then
            # return on success
            return 0
        fi
        counter=$(( counter + 1 ))
        sleep 2
    done
    echo "Routing broken"
    return 1
}

fix_dns () {
    # if ping 8.8.8.8 and not google.com add nameserver
    # check ping google ip
    ping -c 1 8.8.8.8 > /dev/null 2>&1;
    local ret_ping_ip=$?

    # check ping google.com
    ping -c 1 google.com > /dev/null 2>&1;
    local ret_name_ip=$?

    # ip is working but names not
    if [[ ($ret_ping_ip == 0) && ($ret_name_ip != 0) ]]; then
        # add google dns as first DNS
        #echo -e "nameserver 8.8.8.8\n" | cat - /etc/resolv.conf | > /etc/resolv.conf
        #echo -e "nameserver 8.8.8.8\n" | cat - /etc/resolv.conf | tee /etc/resolv.conf > /dev/null
        sed -i '1i nameserver 8.8.8.8\n' /etc/resolv.conf
    else
        # return on success
        return 0
    fi
}


detect_master () {
    local return_code=0
    # set ip for checking avahi
    ip_set "$DEFAULT_VLAN_TEST_IP"
    # if CLUSTERMASTERIP is empty then this machine is the leader"
    local avahi_ip=$(avahi-browse _cluster._tcp -t -r -p | grep 'os-release=hypriot' | grep '^=' | grep ';Cluster-Master' |  grep 'eth0\.' | grep IPv4 | awk -F ';' 'BEGIN { format="%s\n" }{ printf(format,$8) }')

    if [[ -z "$avahi_ip" ]]; then
        # No IP => master node
        return_code=0
    else
        check_linklocal
        if [[ $? == 1 ]]; then
            # No LinkLocal IP but slave node
            return_code=1
        else
            #LinkLocal IP and slave node
            # TODO fix IP
            return_code=2
        fi
    fi
    ip addr flush dev "${VLAN_INTERFACE}"
    return $return_code
}

get_own_ip () {
    local IP=$(ip addr s dev "${VLAN_INTERFACE}" | grep -v inet6 | grep inet | awk '{print $2 }' | cut -d'/'  -f 1)
    local new_func=$(find_ip_of_if "${VLAN_INTERFACE}")
    if [[ "$new_func" != "169.254."* ]]; then
        SELFIP="$new_func"
        echo "$new_func"
        return 0
    else
        echo "The own IP is a LINKLOCAL IP"
        return 1
    fi
}

get_master_ip () {
    local avahi_ip=$(avahi-browse _cluster._tcp -t -r -p | grep 'os-release=hypriot' | grep '^=' | grep ';Cluster-Master' |  grep 'eth0\.' | grep IPv4 | awk -F ';' 'BEGIN { format="%s\n" }{ printf(format,$8) }')
    if [[ -z "$avahi_ip" ]]; then
        local myip=$(find_ip_of_if "${VLAN_INTERFACE}")
        CLUSTERMASTERIP="$myip"
        echo "$myip"
        return 0
    else
        if [[ "$avahi_ip" != "169.254."* ]]; then
            CLUSTERMASTERIP="$avahi_ip"
            echo "$avahi_ip"
            return 0
        else
            echo "The master IP is a LINKLOCAL IP"
            return 1
        fi
    fi
}

test_IP_settings () {
check_linklocal
local ip_ret=$(find_ip_of_if "$VLAN_INTERFACE")
echo "$ip_ret"
#local ip=
#local iface_ret=$(find_if_for_ip "$ip")
#echo "$iface_ret"
}

ask () {
    local QUESTION=$1
    if [[ -z $QUESTION ]]; then
        QUESTION="Are you sure? (y|n)"
    fi
    read -p "$QUESTION" -n 1 -r
    echo    # (optional) move to a new line
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        return 1
    else
        return 0
    fi
}
##################
##### Checks #####
##################
check_start () {
# TODO check_start test startup (like cluster_stop??)
true
}
check_stop () {
    # TODO check_start bool linking
foo=true
    if [ -f "/etc/avahi/avahi-daemon.conf_bak" ]; then
        foo=$foo && false
    fi
    if [ -f "/etc/avahi/services/cluster-master.service" ]; then
        foo=$foo && false
    fi
    if [ -f "/etc/dnsmasq.conf_bak" ]; then
        foo=$foo && false
    fi
    if [ -f "/etc/default/docker_bak" ]; then
        foo=$foo && false
    fi
    if [ -f "/etc/hypriot/docker-compose.yml" ]; then
        foo=$foo && false
    fi
echo $foo
}

##########################
##### Helper & Tools #####
##########################
usage () {
cat << EOM
usage:
        $0 start            Start the cluster lab.

        $0 stop             Stop the cluster lab.

    docker-compose
        $0 downup           Destroys container and creates them again (no config changes)

        $0 up               Starts container.

        $0 down             Destroys container (no config changes)

        $0 down             Destroys container (no config changes)

        $0 dockercleanup    Remove ALL  docker container,
                                        docker networks,
                                        docker volumes,

    setup:
        $0 setup            Opens config file in editor.

        $0 envs             Print config parameter.

    checks:
        $0 checkconsul      Show some infos about consul

        $0 checkvlan        Show settings of "${VLAN_INTERFACE}".

        $0 checkuplink      Show settings for an internet connection.

        $0 checkstop        Test reset of node to pre cluster-lab state.

EOM
}

##### wrapper for interactive usage #####
checkconsul () {
    echo "startparameter of consul"
    echo "++++++++++++++++++++++++"
    docker inspect -f '{{.Config.Cmd}}' ${PROJECT_NAME}_consul_1
    echo "++++++++++++++++++++++++"
    echo "consul / raft leader"
    echo "++++++++++++++++++++++++"
    docker exec -it ${PROJECT_NAME}_consul_1  /consul info | grep "leader\|state"
    echo "++++++++++++++++++++++++"
    echo "consul members"
    echo "++++++++++++++++++++++++"
    docker exec -it ${PROJECT_NAME}_consul_1  /consul members
}
checkvlan () {
    printf "list interface parameters including vlan id\n###########################################\n"
    ip -d link show "${VLAN_INTERFACE}"

    printf "list ip addresses\n#################\n"
    ip addr show "${VLAN_INTERFACE}"
}
checkuplink () {
    printf "list routes\n###########\n"
    ip route show

    printf "view DNS server\n###############\n"
    cat /etc/resolv.conf

    printf "test ping ip\n############\n"
    ping -c 4 8.8.8.8

    printf "test ping dns\n############\n"
    ping -c 4 google.com
}
checkstop () {
    echo "Report existing configuration backups:"
    if [ -f "/etc/avahi/avahi-daemon.conf_bak" ]; then
        echo -e "Avahi-daemon backup exists > \033[31m config NOT resetted \033[0m"
    fi
    if [ -f "/etc/avahi/services/cluster-master.service" ]; then
        echo -e "Avahi cluster-master.service exists > \033[31m this node is master \033[0m"
    fi
    if [ -f "/etc/dnsmasq.conf_bak" ]; then
        echo -e "Dnsmasq backup exists > \033[31m config NOT resetted \033[0m"
    fi
    if [ -f "/etc/default/docker_bak" ]; then
        echo -e "Docker config backup exists > \033[31m config NOT resetted \033[0m"
    fi
    if [ -f "/etc/hypriot/docker-compose.yml" ]; then
        echo -e "Docker-compose.yml exists > \033[31m config NOT resetted \033[0m"
    fi
    read -p "Press return to continue: "
    echo "Get systemd status of used services:"
    systemctl status avahi-daemon.service
    systemctl status dnsmasq.service
    systemctl status docker.service
    systemctl status hypriot-cluster.service
}
downup () {
    echo "Stopping management containers"
    dockercompose_stop
    echo "wait 2 more seconds"
    sleep 2
    echo "Starting management containers"
    dockercompose_start
}
up () {
    echo "Starting management containers"
    dockercompose_start
}
down () {
    echo "Stopping management containers"
    dockercompose_stop
}
setup () {
    editor /etc/hypriot/cluster.conf
}
envs () {
cat << EOM

Current configuration:

DOCKER_COMPOSE_PROJECT  ${DOCKER_COMPOSE_PROJECT}
BROADCAST               ${BROADCAST}
NETMASK                 ${NETMASK}

VLAN_ID                 ${VLAN_ID:-200}
VLAN_INTERFACE          eth0.${VLAN_ID}
DEFAULT_VLAN_MASTER_IP  ${DEFAULT_VLAN_MASTER_IP}
DEFAULT_VLAN_TEST_IP    ${DEFAULT_VLAN_TEST_IP}

# DHCP
DHCP_BROADCAST          ${DHCP_BROADCAST}
DHCP_NETMASK            ${DHCP_NETMASK}
DHCP_RANGE_FROM         ${DHCP_RANGE_FROM}
DHCP_RANGE_TO           ${DHCP_RANGE_TO}

EOM
cat << EOM

Used docker images:

IMAGE_SWARM         ${IMAGE_SWARM}
IMAGE_CONSUL        ${IMAGE_CONSUL}

EOM
}

######################
##### start stop #####
######################
dockercleanup () {
    ask "Are you sure to remove all container?"
    if [[ $? == 0 ]]; then
        docker rm -f rm "$(docker ps -aq)"
    fi
    ask "Are you sure to remove all custom networks?"
    if [[ $? == 0 ]]; then
        docker network rm "$(docker network ls -q -f type=custom)"
    fi
    ask "Are you sure to remove all dangling volumes?"
    if [[ $? == 0 ]]; then
        docker volume rm "$(docker volume ls -q -f dangling=value)"
    fi

}
stop () {
    echo "STEP 1/6 docker container"
    echo "            stop container"
    dockercompose_stop
    echo "            remove docker-compose.yml"
    dockercompose_reset

    echo "STEP 2/6 docker engine"
    echo "            reset config of docker"
    docker_reset
    echo "            restart docker engine"
    systemctl restart docker.service

    echo "STEP 3/6 vlan"
    echo "            remove vlan ${VLAN_INTERFACE}"
    vlan_reset

    echo "STEP 4/6 avahi-daemon"
    echo "            reset avahi config"
    avahi_reset
    echo "            restart avahi-daemon"
    systemctl restart avahi-daemon.service

    echo "STEP 5/6 avahi-daemon"
    echo "            disable cluster-master if active"
    if [ -f "/etc/avahi/services/cluster-master.service" ]; then
        avahi_clusterservice
    fi

    echo "STEP 6/6 dnsmasq"
    echo "            reset dnsmasq config"
    dhcp_reset
    echo "            stop dnsmasq"
    systemctl stop dnsmasq.service

    # TODO check stop exit strategy
    #check_stop
}

setmasterip () {
    local counter=0
    # try 10 times with 1 sec pause between each
    while [ $counter -lt 2 ]; do
        check_ip_bool "${DEFAULT_VLAN_MASTER_IP}"
        if [[ $? == 1 ]]; then
            ip_set "${DEFAULT_VLAN_MASTER_IP}"
        else
            echo "IP configured: ""${DEFAULT_VLAN_MASTER_IP}"
            return 0
        fi
        counter=$(( counter + 1 ))
        sleep 1
    done
    echo "IP configuring failed"
    return 1
}

setup_master () {
    # TODO return values
    echo "    STEP 3.2.1/6"
    echo "                  create cluster-master.service for avahi"
    if [ ! -f "/etc/avahi/services/cluster-master.service" ]; then
        avahi_clusterservice
    fi

    echo "    STEP 3.2.2/6 dnsmasq"
    echo "                  configure dnsmasq"
    dhcp_config
    echo "                  restart dnsmasq"
    systemctl restart dnsmasq.service
}

start () {
    echo "STEP 1/6 vlan"
    echo "            create vlan ${VLAN_ID}"
    vlan_add

    echo "STEP 2/6 avahi"
    echo "            configure avahi-daemon"
    avahi_config
    echo "            restart avahi-daemon"
    systemctl restart avahi-daemon.service

    echo "STEP 3/6 master or slave"
    detect_master
    if [[ $? == 0 ]]; then
        MASTERorSLAVE="master"
        echo "    STEP 3.1/6 set IP (master)"
        setmasterip
        #        test_IP_settings

        echo "    STEP 3.2/6 configure master"
        setup_master
    else
        MASTERorSLAVE="slave"
        echo "    STEP 3.1/6 request IP (slave)"
        ip_request
        #        test_IP_settings
    fi
    echo "            Configured node as ${MASTERorSLAVE}"

    echo "STEP 4/6 get configured IPs"
    SELFIP=$(get_own_ip)
    CLUSTERMASTERIP=$(get_master_ip)
    echo "            selfIP: $SELFIP clustermasterIP: $CLUSTERMASTERIP"
    #    test_IP_settings

    echo "STEP 5/6 docker"
    echo "            configure docker"
    docker_config
    echo "            restart docker"
    systemctl restart docker.service

    echo "STEP 6/6 docker container (docker-compose)"
    echo "            create docker-compose.yml"
    dockercompose_config
    echo "            start container"
    dockercompose_start
    # TODO check startup exit strategy
    #check_start

}


###################################
#                                 #
#     M A I N   P R O G R A M     #
#                                 #
###################################

# Run this script as sudo!
if [ $# -eq 1 ]; then
    case "$1" in
        "start" )
            start
            ;;
        "stop" )
            stop
            ;;
        "checkstop" )
            checkstop
            ;;
        "downup" )
            downup
            ;;
        "down" )
            down
            ;;
        "up" )
            up
            ;;
        "dockercleanup" )
            dockercleanup
            ;;
        "checkvlan" )
            checkvlan
            ;;
        "checkuplink" )
            checkuplink
            ;;
        "checkconsul" )
            checkconsul
            ;;
        "setup" )
            setup
            ;;
        "envs" )
            envs
            ;;
        * )
        if [[ $DEBUG == "true" ]]; then
            "$@"
        else
            usage
        fi
            ;;
    esac
else
    usage
fi
