#!/usr/bin/env bash

function check_docker_images(){
  echo -e "\nDocker Images"

  # from docker version 1.10.0 we can simplify by
  # docker images --format "{{.Repository}}:{{.Tag}}" | cut -d ':' -f1

  result=$(docker images)
  images='swarm consul'

  for image in $images; do
    echo "$result" | grep -q "$image"
    evaluate_result $? "  ${image} exists"
  done
}

function docker_images(){
  if [[ -z "$DOCKER_IMAGES" ]]; then
    DOCKER_IMAGES=$(docker images)
  fi
  echo "$DOCKER_IMAGES"
}

function docker_container(){
  if [[ -z "$DOCKER_CONTAINER" ]]; then
    DOCKER_CONTAINER=$(docker ps)
  fi
  echo "$DOCKER_CONTAINER"
}


function consul_members(){
  if [[ -z "$CONSUL_MEMBERS" ]]; then
    CONSUL_MEMBERS=$(docker exec -it ${DOCKER_COMPOSE_PROJECT}_consul /consul members)
  fi
  echo "$CONSUL_MEMBERS"
}

function consul_nodes_from_kv(){
  if [[ -z "$CONSUL_NODES_FROM_KV" ]]; then
    CONSUL_NODES_FROM_KV="$(curl --silent http://"${VLAN_NODE_IP}":8500/v1/catalog/nodes)"
  fi
  echo "$CONSUL_NODES_FROM_KV"
}

function check_consul(){
  echo -e "\nConsul"

  docker_images | grep -q 'consul'
  evaluate_result $? "  Consul Docker image exists"

  docker_container | grep -q 'consul agent -serve'
  evaluate_result $? "  Consul Docker container is running"

  listening_consul_ports=$(netstat -tlpen | grep consul)
  expected_consul_ports="8300 8301 8302 8400 8500 8600"
  for port in $expected_consul_ports; do
    echo "${listening_consul_ports}" | grep -q "${port}"
    evaluate_result $? "  Consul is listening on port ${port}"
  done

  consul_nodes_from_kv | grep -q "Address"
  evaluate_result $? "  Consul API works"

  # extract IPs of all consul nodes from json returned from API
  # ping all IPs
  regex="((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))"
  while read ip_address_snippet ; do
    local ip=$(echo "$ip_address_snippet" | grep -oP "${regex}")
    ping -W 1 -c 2 ${ip} > /dev/null 2>&1
    evaluate_result $? "  Cluster-Node is pingable with IP ${ip}"
  done < <( consul_nodes_from_kv | grep -oP "\"Address\":\"${regex}\"" )

  number_of_failed_consul_nodes=$(docker exec -it ${DOCKER_COMPOSE_PROJECT}_consul /consul members | grep -c 'failed')
  [[ $number_of_failed_consul_nodes -eq 0 ]]
  evaluate_result $? "  No Cluster-Node is in status 'failed'"

  # Variables that use some helper functions
  VLAN_NODE_IP="$(get_ip_of_interface "${VLAN_INTERFACE}")"
  ESCAPED_VLAN_NODE_IP=$(escape_ip_for_regex "${VLAN_NODE_IP}")

  netstat --numeric --listening --programs --tcp --inet | grep 'docker' | grep -q -E "${ESCAPED_VLAN_NODE_IP}:7946"
  evaluate_result $? "  Consul is able to talk to docker engine on port 7946 (Serf)"

}

function check_swarm(){
  echo -e "\nSwarm"

  number_of_alive_consul_nodes=$(docker exec -it ${DOCKER_COMPOSE_PROJECT}_consul /consul members | grep -c 'alive')
  number_of_swarm_nodes=$(docker -H "tcp://${VLAN_NODE_IP}:2378" info | grep 'Nodes: ' | cut -d ' ' -f2)
  [[ $number_of_swarm_nodes -eq $number_of_alive_consul_nodes ]]
  evaluate_result $? "  Number of Swarm and Consul nodes is equal"
}

function pre_check_docker_container(){
  check_docker_images
}

function post_check_docker_container(){
  check_consul
  check_swarm
}

# docker container
function run_docker_container(){
  echo -e "\n\e[34mConfigure Docker containers for consul and swarm\e[0m"
  VLAN_NODE_IP="$(get_ip_of_interface "${VLAN_INTERFACE}")"

  # configure consul start command
  local consul_docker="docker run -dit --restart always --name ${DOCKER_COMPOSE_PROJECT}_consul --net host"
  local consul_ports="-p ${VLAN_NODE_IP}:8400:8400 -p ${VLAN_NODE_IP}:8500:8500 -p ${VLAN_NODE_IP}:8600:8600 -p ${VLAN_NODE_IP}:8301:8301 -p ${VLAN_NODE_IP}:8302:8302 ${IMAGE_CONSUL}"


  if [[ "$(is_node_cluster_leader)" == "0" ]]; then
    # this node is cluster leader and should bootstrap consul
    local consul_command="agent -server -rejoin -data-dir /data -ui-dir /ui -bind ${VLAN_NODE_IP} -client 0.0.0.0 -bootstrap-expect 1"
  else
    # this node is cluster follower and should join the existing leader
    local consul_command="agent -server -rejoin -data-dir /data -ui-dir /ui -bind ${VLAN_NODE_IP} -client 0.0.0.0 -join ${VLAN_LEADER_IP}:8301"
  fi

  # consul
  local cmd="$consul_docker $consul_ports $consul_command"
  eval "$cmd"  > /dev/null 2>&1

  # wait for consul to initiate
  sleep 3

  # swarm join
  eval "docker run -dit --restart always --name ${DOCKER_COMPOSE_PROJECT}_swarm ${IMAGE_SWARM} join --advertise ${VLAN_NODE_IP}:2375 consul://${VLAN_NODE_IP}:8500"  > /dev/null 2>&1

  #swarm manage
  eval "docker run -dit --restart always --name ${DOCKER_COMPOSE_PROJECT}_swarmmanage -p 2378:2375 ${IMAGE_SWARM} manage --replication --advertise ${VLAN_NODE_IP}:2378 consul://${VLAN_NODE_IP}:8500"  > /dev/null 2>&1

}

function remove_docker_container(){
  echo -e "\n\e[34mRemove Docker container\e[0m"

  docker rm -vf "${DOCKER_COMPOSE_PROJECT}_swarmmanage"   > /dev/null 2>&1
  docker rm -vf "${DOCKER_COMPOSE_PROJECT}_swarm"   > /dev/null 2>&1
  docker rm -vf "${DOCKER_COMPOSE_PROJECT}_consul"   > /dev/null 2>&1
}
