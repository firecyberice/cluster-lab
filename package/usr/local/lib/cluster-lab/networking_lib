#!/usr/bin/env bash

# VLAN configuration
function add_vlan_interface(){
  ip link add link eth0 name "${VLAN_INTERFACE}" type vlan id "${VLAN_ID}" > /dev/null 2>&1
  return $?
}

function remove_vlan_interface(){
  ip link delete dev "${VLAN_INTERFACE}" type vlan > /dev/null 2>&1
  return $?
}

# setup avahi-daemon
function configure_avahi(){
  # create backup file
  if [[ ! -f "/etc/avahi/avahi-daemon.conf.cluster-lab-backup" ]]; then
    cp /etc/avahi/avahi-daemon.conf /etc/avahi/avahi-daemon.conf.cluster-lab-backup
  fi
  # change configuration
  # disable avahi on wlan0 and docker0
  sed -i -e 's/#deny-interfaces=eth1/deny-interfaces=eth1,wlan0,docker0/'  /etc/avahi/avahi-daemon.conf
  # enable avahi on eth0 and ${VLAN_INTERFACE}
  sed -i -e "s/#allow-interfaces=eth0/allow-interfaces=eth0,${VLAN_INTERFACE}/"  /etc/avahi/avahi-daemon.conf
  # disable use of IPv6 addresses
  sed -i -e 's/use-ipv6=yes/use-ipv6=no/' /etc/avahi/avahi-daemon.conf

  systemctl reload avahi-daemon.service
}

# IP configuration
function add_ip_to_vlan_interface(){
  local ip="$1"
  ip addr add "${ip}${VLAN_NETMASK}" dev "${VLAN_INTERFACE}" > /dev/null 2>&1
  if [[ $? == 0 ]]; then
    ip link set dev "${VLAN_INTERFACE}" up > /dev/null 2>&1
    return $?
  fi
}

function remove_ip_from_vlan_interface(){
  local ip="$1"
  ip addr delete "${ip}${VLAN_NETMASK}" dev "${VLAN_INTERFACE}" > /dev/null 2>&1
  return $?
}

function get_current_node_ip(){
  if [[ -z "${NODE_IP}" ]]; then
    ip link set dev "${VLAN_INTERFACE}" up > /dev/null 2>&1
    timeout 3 dhclient "${VLAN_INTERFACE}"

    # try 3 times to get an ip address
    for i in {1..3}; do
      NODE_IP=$(get_ip_of_interface "${VLAN_INTERFACE}")
      if [[ -z "${NODE_IP}" ]]; then
        break
        echo "tried to get ip $i times"
      fi
      sleep 2
    done
  fi
  echo "${NODE_IP}"
}

function get_current_leader_ip(){

  if [[ -z "${LEADER_IP}" ]]; then
    add_ip_to_vlan_interface "${VLAN_TEST_IP}"

    avahi_query_result=$(avahi-browse _cluster._tcp --terminate --resolve --parsable --ignore-local)
    LEADER_IP=$(echo "$avahi_query_result" | grep '^=' | grep ';Cluster-Leader' |  grep 'eth0\.' | grep IPv4 | cut -d ';' -f8)

    remove_ip_from_vlan_interface "${VLAN_TEST_IP}"
  fi
  echo "${LEADER_IP}"
}

function is_node_cluster_leader(){
  avahi_query_result=$(avahi-browse _cluster._tcp --terminate --resolve --parsable)
  local leader_ip=$(echo "$avahi_query_result" | grep '^=' | grep ';Cluster-Leader' |  grep 'eth0\.' | grep IPv4 | cut -d ';' -f8)

  [[ "$(get_current_node_ip)" == "${leader_ip}" ]]
  echo $?
}

function is_link_local_ip(){
  local ip="${1}"

  if [[ "$ip" == "169.254."* ]]; then
    return 0
  else
    return 1
  fi
}

function add_avahi_cluster_leader_service_file(){
cat << EOM > /etc/avahi/services/cluster-leader.service
<?xml version="1.0" standalone='no'?><!--*-nxml-*-->
<!DOCTYPE service-group SYSTEM "avahi-service.dtd">
<service-group>
  <name replace-wildcards="yes">Cluster-Leader=%h</name>
  <service>
    <type>_cluster._tcp</type>
    <port>22</port>
    <txt-record>os-release=hypriot</txt-record>
  </service>
</service-group>
EOM
}

# various checks of network connectivity
function check_internet_connection(){
  echo -e "\nInternet Connection"
  ERRORS=0

  ping -W 1 -c 2 8.8.8.8 > /dev/null 2>&1
  evaluate_result $? "  Internet is reachable"

  timeout 2 ping -c 1 google.com > /dev/null 2>&1
  evaluate_result $? "  DNS works"

  return "$ERRORS"
}

function pre_check_networking(){
  echo -e "\nNetworking"
  ERRORS=0

  ip link show | grep -q eth0
  evaluate_result $? "  eth0 exists"

  [[ ! -z "$(get_ip_of_interface eth0)" ]]
  evaluate_result $? "  eth0 has an ip address"

  check_if_os_package_exists "vlan"
  evaluate_result $? "  vlan os package exists"

  check_if_os_package_exists "avahi"
  evaluate_result $? "  Avahi os package exists"

  check_if_os_package_exists "avahi-utils"
  evaluate_result $? "  Avahi-utils os package exists"

  check_if_process_exists "avahi"
  evaluate_result $? "  Avahi process exists"

  [[ ! -f "/etc/avahi/avahi-daemon.conf.cluster-lab-backup" ]]
  evaluate_result $? "  /etc/avahi/avahi-daemon.conf backup file is absent"

  [[ $(avahi-browse --all --terminate | grep -c 'IPv6') -gt 0 ]]
  evaluate_result $? "  Avahi is using IPv6 addresses"

  [[ $(avahi-browse --all --terminate | grep -c "${VLAN_INTERFACE}") -eq 0 ]]
  evaluate_result $? "  Avahi is not using ${VLAN_INTERFACE}"

  [[ ! -f "/etc/avahi/services/cluster-leader.service" ]]
  evaluate_result $? "  Avahi cluster-leader.service file is absent"

  return "$ERRORS"
}

function post_check_networking(){
  echo -e "\nNetworking"
  ERRORS=0

  ip link show | grep -q eth0
  evaluate_result $? "  eth0 exists"

  ip link show | grep -q "eth0.${VLAN_ID}"
  evaluate_result $? "  eth0.${VLAN_ID} exists"

  # check if the vlan 192.168.200 subnet exists
  regex="$(escape_ip_for_regex "${VLAN_SUBNET}")\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
  [[ "$(get_ip_of_interface "eth0.${VLAN_ID}")" =~ $regex ]]
  evaluate_result $? "  eth0.${VLAN_ID} has correct IP from vlan network"

  ping -W 1 -c 2 "${VLAN_LEADER_IP}" > /dev/null 2>&1
  evaluate_result $? "  Cluster leader is reachable"

  number_of_ips=$(ip addr show dev "eth0.${VLAN_ID}" | grep -c "inet\s")
  [[ "$number_of_ips" -eq 1 ]]
  evaluate_result $? "  eth0.${VLAN_ID} has exactly one IP"

  regex="169\.254\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
  [[ ! "$(get_ip_of_interface "eth0.${VLAN_ID}")" =~ $regex ]]
  evaluate_result $? "  eth0.${VLAN_ID} has no local link address"

  check_if_process_exists "avahi"
  evaluate_result $? "  Avahi process exists"

  [[ -f "/etc/avahi/avahi-daemon.conf.cluster-lab-backup" ]]
  evaluate_result $? "  /etc/avahi/avahi-daemon.conf backup file exists"

  [[ $(avahi-browse --all --terminate | grep -c 'IPv6') -eq 0 ]]
  evaluate_result $? "  Avahi is not using IPv6 addresses"

  [[ $(avahi-browse --all --terminate | grep -c "${VLAN_INTERFACE}") -gt 0 ]]
  evaluate_result $? "  Avahi is using ${VLAN_INTERFACE}"

  if [[ $(is_node_cluster_leader) == 0 ]]; then
    [[ -f "/etc/avahi/services/cluster-leader.service" ]]
    evaluate_result $? "  Avahi cluster-leader.service file exists"
  fi

  return "$ERRORS"
}

# setup basic networking
function configure_networking(){
  echo -e "\n\e[34mConfigure basic networking\e[0m"


  add_vlan_interface
  if [[ -z "$(get_current_leader_ip)" ]]; then
    # there is no leader yet

    # ensure that there is no link local ip on the VLAN_INTERFACE
    ip addr flush dev "${VLAN_INTERFACE}"

    add_ip_to_vlan_interface "${VLAN_LEADER_IP}"
    add_avahi_cluster_leader_service_file
  else
    # we already have a leader
    if [[ -z $(get_current_node_ip) ]]; then
      # we did not get an ip from dhcp or link local
      echo -e "Failed to configure networking. Could not get an IP.\nTrying to rollback networking configuration"
      reset_networking
      exit 1
    else
      # we have an ip
      if [[ "$(is_link_local_ip "$(get_current_node_ip)")" == "1" ]]; then
        # we did not get an ip from dhcp
        echo -e "Failed to configure networking: Could not get an IP via DHCP. \nTrying to rollback networking configuration"
        reset_networking
        exit 1
      fi
    fi
  fi
  configure_avahi
}

# reset basic networking
function reset_networking(){
  echo -e "\n\e[34mReset basic networking\e[0m"

  remove_vlan_interface
  if [ -f "/etc/avahi/avahi-daemon.conf.cluster-lab-backup" ]; then
    mv -f /etc/avahi/avahi-daemon.conf.cluster-lab-backup /etc/avahi/avahi-daemon.conf
    systemctl reload avahi-daemon.service
  fi
  rm -f /etc/avahi/services/cluster-leader.service
}
