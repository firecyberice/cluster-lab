#!/usr/bin/env bash

# VLAN configuration
function add_vlan_interface(){
  ip link add link eth0 name "${VLAN_INTERFACE}" type vlan id "${VLAN_ID}"
  ip link set dev "${VLAN_INTERFACE}" up
}

function remove_vlan_interface(){
  ip link delete dev "${VLAN_INTERFACE}" type vlan
}

# IP configuration
function add_ip_to_vlan_interface(){
  local ip="$1"

  ip addr add "${ip}${VLAN_NETMASK}" dev "${VLAN_INTERFACE}"
  ip link set dev "${VLAN_INTERFACE}" up
}

function remove_ip_from_vlan_interface(){
  local ip="$1"

  ip addr delete "${ip}${VLAN_NETMASK}" dev "${VLAN_INTERFACE}"
}

function get_current_node_ip(){
  if [[ -z "${NODE_IP}" ]]; then
    ip link set dev "${VLAN_INTERFACE}" up
    dhclient "${VLAN_INTERFACE}"

    # try 3 times to get an ip address
    for i in {1..3}; do
      NODE_IP=$(get_ip_of_interface "${VLAN_INTERFACE}")
      if [[ -n "$NODE_IP" ]]; then
        break
        echo "tried to get ip $i times"
      fi
      sleep 2
    done
  fi
  echo "$NODE_IP"
}

function get_current_leader_ip(){
  if [[ -z "$MASTER_IP" ]]; then
    add_ip_to_vlan_interface "${VLAN_TEST_IP}"

    avahi_query_result=$(avahi-browse _cluster._tcp --terminate --resolve --parsable --ignore-local)
    MASTER_IP=$(echo "$avahi_query_result" | grep '^=' | grep ';Cluster-Leader' |  grep 'eth0\.' | grep IPv4 | cut -d ';' -f8)

    remove_ip_from_vlan_interface "${VLAN_TEST_IP}"
  fi
  echo "$MASTER_IP"
}

function is_link_local_ip(){
  local ip="${1}"

  if [[ "$ip" == "169.254."* ]]; then
    return 0
  else
    return 1
  fi
}

# various checks of network connectivity
function check_internet_connection(){
  echo -e "\nInternet Connection"
  ERRORS=0

  ping -W 1 -c 2 8.8.8.8 > /dev/null 2>&1
  evaluate_result $? "  Internet is reachable"

  timeout 1 ping -c 1 google.com > /dev/null 2>&1
  evaluate_result $? "  DNS works"

  return "$ERRORS"
}


function pre_check_networking(){
  echo -e "\nNetworking"
  ERRORS=0

  ip link show | grep -q eth0
  evaluate_result $? "  eth0 exists"

  [[ ! -z "$(get_ip_of_interface eth0)" ]]
  evaluate_result $? "  eth0 has an ip address"

  return "$ERRORS"
}


function post_check_networking(){
  echo -e "\nNetworking"
  ERRORS=0

  ip link show | grep -q eth0
  evaluate_result $? "  eth0 exists"

  ip link show | grep -q "eth0.${VLAN_ID}"
  evaluate_result $? "  eth0.${VLAN_ID} exists"

  # check if the vlan 192.168.200 subnet exists
  regex="$(escape_ip_for_regex "${VLAN_SUBNET}")\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
  [[ "$(get_ip_of_interface "eth0.${VLAN_ID}")" =~ $regex ]]
  evaluate_result $? "  eth0.${VLAN_ID} has correct IP from vlan network"

  ping -W 1 -c 2 "${VLAN_LEADER_IP}" > /dev/null 2>&1
  evaluate_result $? "  Cluster leader is reachable"

  number_of_ips=$(ip addr show dev "eth0.${VLAN_ID}" | grep -c "inet\s")
  [[ "$number_of_ips" -eq 1 ]]
  evaluate_result $? "  eth0.${VLAN_ID} has exactly one IP"

  regex="169\.254\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
  [[ ! "$(get_ip_of_interface "eth0.${VLAN_ID}")" =~ $regex ]]
  evaluate_result $? "  eth0.${VLAN_ID} has no local link address"

  return "$ERRORS"
}

# setup basic networking
function configure_networking(){
  add_vlan_interface
  if [[ -z "$(get_current_leader_ip)" ]]; then
    # there is no leader yet

    # ensure that there is no link local ip on the VLAN_INTERFACE
    ip addr flush dev "${VLAN_INTERFACE}"

    add_ip_to_vlan_interface "${VLAN_LEADER_IP}"
  else
    # we already have a leader
    if [[ -z $(get_current_node_ip) ]]; then
      # we have no ip from dhcp
      echo -e "Failed to configure networking. \nTrying to rollback networking configuration"
      reset_networking
      exit 1
    else
      # we have an ip from dhcp
      if [[ "$(is_link_local_ip "$(get_current_node_ip)")" == "1" ]]; then
        # we got a link local ip which is wrong
        echo -e "Failed to configure networking. \nTrying to rollback networking configuration"
        reset_networking
        exit 1
      fi
    fi
  fi
}

# reset basic networking
function reset_networking(){
  remove_vlan_interface
}
